import path from 'node:path'
import { describe, it, expect } from 'vitest'
import fs from 'node:fs/promises'

import {
  pathToPosix,
  isFileSync,
  getPlaywrightVersion,
  getPlaywrightVersionFromNpmLock,
  getPlaywrightVersionFromYarnLock,
  getPlaywrightVersionFromPnpmLock,
} from '../util'

describe('util', () => {
  describe('pathToPosix()', () => {
    it('should convert Windows paths', () => {
      expect(pathToPosix('src\\__checks__\\my_check.spec.ts', '\\'))
        .toEqual('src/__checks__/my_check.spec.ts')
    })

    it('should have no effect on linux paths', () => {
      expect(pathToPosix('src/__checks__/my_check.spec.ts'))
        .toEqual('src/__checks__/my_check.spec.ts')
    })
  })
  describe('isFileSync()', () => {
    it('should determine if a file is present at a given path', () => {
      expect(isFileSync(path.join(__dirname, '/fixtures/this-is-a-file.ts'))).toBeTruthy()
    })
    it('should determine if a file is not present at a given path', () => {
      expect(isFileSync('some random string')).toBeFalsy()
    })
  })

  describe('getPlaywrightVersion() - error handling', () => {
    it('should throw error for missing lockfile', async () => {
      const mockLockfilePath = '/fake/path/unsupported.lock'
      await expect(getPlaywrightVersion(mockLockfilePath)).rejects.toThrow()
    })

    it('should throw error for unsupported lockfile format', async () => {
      const lockfilesDir = path.join(__dirname, 'fixtures', 'lockfiles')
      const unsupportedLockfile = path.join(lockfilesDir, 'package.json') // existing file but wrong format
      await expect(getPlaywrightVersion(unsupportedLockfile)).rejects.toThrow('Unsupported lockfile format: package.json')
    })
  })

  describe('getPlaywrightVersionFromNpmLock()', () => {
    const lockfilesDir = path.join(__dirname, 'fixtures', 'lockfiles')

    it('should extract version from npm package-lock.json', async () => {
      const lockfilePath = path.join(lockfilesDir, 'package-lock.json')
      const lockfileContent = await fs.readFile(lockfilePath, 'utf-8')
      const version = getPlaywrightVersionFromNpmLock(lockfileContent)
      expect(version).toBe('1.40.0')
    })

    it('should return undefined if playwright is not in lockfile', () => {
      const mockLockfile = JSON.stringify({
        name: 'test-project',
        version: '1.0.0',
        lockfileVersion: 3,
        requires: true,
        packages: {
          '': {
            name: 'test-project',
            version: '1.0.0',
          },
        },
      })
      const version = getPlaywrightVersionFromNpmLock(mockLockfile)
      expect(version).toBeUndefined()
    })
  })

  describe('getPlaywrightVersionFromYarnLock()', () => {
    const lockfilesDir = path.join(__dirname, 'fixtures', 'lockfiles')

    it('should extract version from yarn.lock v1', async () => {
      const lockfilePath = path.join(lockfilesDir, 'yarn-v1', 'yarn.lock')
      const lockfileContent = await fs.readFile(lockfilePath, 'utf-8')
      const version = getPlaywrightVersionFromYarnLock(lockfileContent)
      expect(version).toBe('1.39.0')
    })

    it('should extract version from yarn.lock v2', async () => {
      const lockfilePath = path.join(lockfilesDir, 'yarn-v2', 'yarn.lock')
      const lockfileContent = await fs.readFile(lockfilePath, 'utf-8')
      const version = getPlaywrightVersionFromYarnLock(lockfileContent)
      expect(version).toBe('1.41.0')
    })

    it('should return undefined if playwright is not in lockfile', () => {
      const mockLockfile = `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

"lodash@^4.17.21":
  version "4.17.21"
  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c"
  integrity sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==`
      const version = getPlaywrightVersionFromYarnLock(mockLockfile)
      expect(version).toBeUndefined()
    })
  })

  describe('getPlaywrightVersionFromPnpmLock()', () => {
    const lockfilesDir = path.join(__dirname, 'fixtures', 'lockfiles')

    it('should extract version from pnpm-lock.yaml', async () => {
      const lockfilePath = path.join(lockfilesDir, 'pnpm-lock.yaml')
      const lockfileContent = await fs.readFile(lockfilePath, 'utf-8')
      const version = getPlaywrightVersionFromPnpmLock(lockfileContent)
      expect(version).toBe('1.42.0')
    })

    it('should return undefined if playwright is not in lockfile', () => {
      const mockLockfile = `lockfileVersion: '6.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

devDependencies:
  lodash:
    specifier: ^4.17.21
    version: 4.17.21

packages:

  /lodash@4.17.21:
    resolution: {integrity: sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==}
    dev: true`
      const version = getPlaywrightVersionFromPnpmLock(mockLockfile)
      expect(version).toBeUndefined()
    })
  })

  describe('getPlaywrightVersion() with lockfiles', () => {
    const lockfilesDir = path.join(__dirname, 'fixtures', 'lockfiles')

    it('should parse npm package-lock.json', async () => {
      const lockfilePath = path.join(lockfilesDir, 'package-lock.json')
      const version = await getPlaywrightVersion(lockfilePath)
      expect(version).toBe('1.40.0')
    })

    it('should parse yarn.lock v1', async () => {
      const lockfilePath = path.join(lockfilesDir, 'yarn-v1', 'yarn.lock')
      const version = await getPlaywrightVersion(lockfilePath)
      expect(version).toBe('1.39.0')
    })

    it('should parse yarn.lock v2', async () => {
      const lockfilePath = path.join(lockfilesDir, 'yarn-v2', 'yarn.lock')
      const version = await getPlaywrightVersion(lockfilePath)
      expect(version).toBe('1.41.0')
    })

    it('should parse pnpm-lock.yaml', async () => {
      const lockfilePath = path.join(lockfilesDir, 'pnpm-lock.yaml')
      const version = await getPlaywrightVersion(lockfilePath)
      expect(version).toBe('1.42.0')
    })

    it('should throw error for missing lockfile', async () => {
      const lockfilePath = path.join(lockfilesDir, 'missing.lock')
      await expect(getPlaywrightVersion(lockfilePath)).rejects.toThrow()
    })
  })
})
